import os
import re
import smtplib
import numpy as np
import logging
from urllib.parse import urlparse, parse_qs
from google.ads.googleads.client import GoogleAdsClient
from sqlalchemy import create_engine, text
from sshtunnel import SSHTunnelForwarder
from superagi.tools.base_tool import BaseTool
from pydantic import BaseModel, Field
from typing import Type, Optional
from email.message import EmailMessage
from sklearn.ensemble import RandomForestRegressor

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–∞
logging.basicConfig(filename="agent_actions.log", level=logging.INFO)

TEST_MODE = True  # –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

class GoogleAdsOptimizerInput(BaseModel):
    campaign_id: str = Field(..., description="ID —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
    max_cpa: float = Field(..., description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é.")
    min_conversion_rate: float = Field(..., description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.05 –¥–ª—è 5%).")
    attribution_window_days: int = Field(30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.")
    max_budget: float = Field(..., description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏.")
    daily_budget_limit: float = Field(..., description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç.")
    optimization_strategy: str = Field("ROAS", description="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: 'ROAS', 'CPA', 'Manual'.")

class GoogleAdsOptimizer(BaseTool):
    name: str = "Google Ads Optimizer"
    args_schema: Type[BaseModel] = GoogleAdsOptimizerInput
    description: str = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Google Ads –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è."

    def _initialize_google_ads_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Ads."""
        return GoogleAdsClient.load_from_storage("google-ads.yaml")

    def _execute(self, campaign_id: str, max_cpa: float, min_conversion_rate: float, 
                  attribution_window_days: int, max_budget: float, daily_budget_limit: float, optimization_strategy: str):
        logging.info(f"üîπ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id} –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {TEST_MODE}")
        google_ads_client = self._initialize_google_ads_client()
        sales_data = self._fetch_sales_data(attribution_window_days)
        model = self._train_bid_model(sales_data)
        self._check_budget_limits(google_ads_client, campaign_id, daily_budget_limit, max_budget)
        self._analyze_keywords(google_ads_client, campaign_id)
        
        optimization_result = {
            "suggested_changes": self._apply_optimization_strategy(campaign_id, optimization_strategy, max_cpa, min_conversion_rate)
        }
        
        if TEST_MODE:
            print("üõë –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è.")
            print("üîπ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", optimization_result)
        else:
            self._apply_google_ads_changes(optimization_result)
        
        self._save_report_to_file("optimization_report.txt", optimization_result)
        return optimization_result

    def _apply_optimization_strategy(self, campaign_id, strategy, cpa, roas):
        if strategy == "ROAS":
            if roas > 3:
                return "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫, ROAS –≤—ã—Å–æ–∫–∏–π"
            elif roas < 1:
                return "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫, ROAS –Ω–∏–∑–∫–∏–π"
        elif strategy == "CPA":
            if cpa > self.max_cpa:
                return "–°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫, CPA –≤—ã—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ"
            elif cpa < self.max_cpa * 0.8:
                return "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫, CPA –Ω–∏–∑–∫–∏–π"
        return "–°—Ç–∞–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

    def _safe_bid_adjustment(self, new_bid, current_bid):
        max_change = 0.3
        if new_bid > current_bid * (1 + max_change):
            new_bid = current_bid * (1 + max_change)
        elif new_bid < current_bid * (1 - max_change):
            new_bid = current_bid * (1 - max_change)
        return new_bid

    def _log_action(self, action, details):
        log_message = f"üîπ –î–µ–π—Å—Ç–≤–∏–µ: {action} | –î–µ—Ç–∞–ª–∏: {details}"
        logging.info(log_message)
        print(log_message)

    def _save_report_to_file(self, filename, report_content):
        with open(filename, "w") as file:
            file.write(str(report_content))
        logging.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {filename}")
